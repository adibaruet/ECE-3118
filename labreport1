
<p align="center">
  <img src="https://saif1024bd.wordpress.com/wp-content/uploads/2011/06/ruet-monogram-1545x1850.png?w=250" alt="RUET Logo" height="200">
</p>

<p align="center"><em>"Guided by the Light of Knowledge"</em></p>

# Rajshahi University of Engineering & Technology (RUET)  
## Department of Electrical & Computer Engineering (ECE)  

### Lab Report

**Lab Title:** Introduction to Basic Git Commands  
**Student Name:** Humaira Tasnim Adiba 
**Roll Number:** 2010002  
**Lab Session:** 01  
**Submission Date:** October 19, 2024  
**Course Code:** ECE 3113  

---

**Submitted to:**  
**Instructor:** Oishi Joyti  
**Position:** Lecturer  
**Department:** Electrical & Computer Engineering (ECE), RUET  

---

### Exploring Markdown Syntax for Git Documentation

Markdown is a lightweight tool that simplifies formatting for text-based documents. It's extensively used in creating clean, readable documentation across many platforms, including GitHub.

---

### Overview of Topics Covered:
1. Headers  
2. Text Formatting Styles  
3. Lists: Ordered and Unordered  
4. Adding Links and Images  
5. Using Code Blocks  
6. Blockquotes for Emphasis  
7. Creating Tables  
8. Adding Horizontal Lines  
9. Task Lists  
10. Utilizing Inline HTML for Customization

---

### Headers  
The header formatting in Markdown is done using `#` symbols. The number of `#` determines the size of the header, with more symbols indicating smaller headers.

```markdown
# Main Header (H1)  
## Subheader (H2)  
### Section Header (H3)
```

---

### Text Formatting  
Basic text styling includes bold, italics, and strikethrough effects.

```markdown
**Bold**  
*Italic*  
~~Strikethrough~~
```

---

### Lists: Ordered and Unordered  
Markdown makes it simple to create both ordered and unordered lists:

**Ordered List:**
```markdown
1. First  
2. Second  
3. Third
```

**Unordered List:**
```markdown
- Item 1  
- Item 2  
- Item 3
```

---

### Adding Links and Images  
Markdown allows embedding links and images with a straightforward syntax.

```markdown
[Link Text](https://example.com)  
![Alt Text](image-url.jpg)
```

Example:  
[code](https://www.code.org)  
![Code](https://www.google.com/url?sa=i&url=https%3A%2F%2Funsplash.com%2Fs%2Fphotos%2Fcode&psig=AOvVaw2x6YsJ1aG-Q5IdiH07Bzzk&ust=1729405103522000&source=images&cd=vfe&opi=89978449&ved=0CBEQjRxqFwoTCPDJ8JrmmYkDFQAAAAAdAAAAABAE)

---

### Using Code Blocks  
You can insert code directly within your text using either inline code or block code formats:

```markdown
`Inline code goes here`
```

```js
// Block of JavaScript code
function sampleFunction() {
  console.log("Hello, World!");
}
```

---

### Blockquotes  
Use blockquotes for highlighting important notes or citations.

```markdown
> This is a blockquote example.
```

---

### Tables  
Markdown tables allow organizing data clearly:

```markdown
| Header 1 | Header 2 | Header 3 |  
|---------|---------|---------|  
| Data A  | Data B  | Data C  |
```

---

### Best Coding Practices for Git and Markdown  
To maintain clean, readable, and efficient code, it's essential to follow certain conventions, such as consistent naming, commenting intelligently, and breaking down larger functions into smaller, manageable pieces.

#### What to Do:
- Use clear naming conventions like `camelCase` for variables and `PascalCase` for classes.
- Keep functions concise and to the point.
- Write unit tests for validation and ensure the code is easy to debug.

#### What Not to Do:
- Avoid hardcoding values; use constants where possible.
- Don't overcomplicate logicâ€”break it into smaller functions for better readability.

---

In conclusion, understanding Markdown is crucial for effective documentation in Git, and maintaining best coding practices ensures a cleaner, more efficient workflow.

---  

